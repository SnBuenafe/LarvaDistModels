---
title: "OMIP runs"
author: "Tin Buenafe"
editor: source
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  message = FALSE,
  warning = FALSE,
  output = FALSE,
  comment = "#>"
)

base_dir <- path.expand(file.path("~", "Documents", "GitHub", "hotrstuff", "data-raw"))
volumes_dir <- file.path("/", "Volumes", "Expansion", "LarvaBRT_Submission2")

variable = "vo"
```

```{r setup}
# To install `hotrstuff`, an R package that wrangles ESM data (currently in development), check out: https://snbuenafe.github.io/hotrstuff/ 
library(hotrstuff)
library(terra)
```

## Download

Downloading OMIP outputs from <https://aims2.llnl.gov/> into their respective folders.
```{r download, echo = FALSE}
# htr_download_ESM(indir = file.path(volumes_dir, "raw", "wget"), # input directory
#                  outdir = file.path(volumes_dir, "raw", "omip", variable) # output directory
# )
```

## Shift years

OMIP runs are six cycles of simulations using the 61-year JRA55-do forcing data set (1958-2018), resulting in *366-year* model outputs. So, we need to shift the years 1652 years forward for some of the models (e.g., starting at 0001) to standardize across models.

```{r shift_years}
htr_shift_years(indir = file.path(volumes_dir, "raw", "omip", "vo_temporary"),
                outdir = file.path(volumes_dir, "proc", "shifted", "omip", variable),
                adjust_value = 1652)
```

## Merge

Now, we merge the files by model-variable-scenario-frequency combination and only take the files that have the years 1956-1981 to match the Nishikawa dataset.

```{r merge}
htr_merge_files(indir = file.path(volumes_dir, "proc", "shifted", "omip", variable), #input directory
                outdir = file.path(base_dir, "data", "proc", "merged", "omip", variable), #output directory
                year_start = 1956, # earliest year considered
                year_end = 1981 # latest year considered
            )
```

## Select years

Because we're using OMIP models with six simulations of 1958-2018, we need to account for the spin-up of the models and the fact that after each cycle, the model experiences a large shock from 2018 going back to 1958 (Huguenin et al., 2022). So, even though the Nishikawa dataset is from 1956-1981, we are going to calculate predictors from 1963 (+5 years from the initial year of each simulation cycle) until 1981, resulting in a 19-year summary.

```{r adjust}
htr_slice_period(indir = file.path(base_dir, "data", "proc", "merged", "omip", variable), #input directory
                 outdir = file.path(base_dir, "data", "proc", "sliced", "omip", variable), #output directory
                 freq = "Omon", #ocean, monthly
                 scenario = "omip2",
                 year_start = 1963,
                 year_end = 1981,
                 overwrite = FALSE
             )

```

## Fix calendar periods (if needed)

This function fixes the calendar days, for days with leap years. This is to standardize the calendar across the different models.

```{r calendar}
htr_fix_calendar(indir = file.path(base_dir, "data", "proc", "sliced", "omip", variable)) #will be rewritten
```

## Change frequency

Now, we create objects for the different seasons according to Nishikawa: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; and 4) Oct-Dec.

```{r seasons}
# January - March
htr_seasonal_frequency(indir = file.path(base_dir, "data", "proc", "sliced", "omip", variable),
                       tempdir = file.path(base_dir, "data", "temporary"), # you can also have this as a folder that isn't temporary, you just need to delete the line of code below that deletes all the files in this folder. `tempdir` holds the files that selects the particular months of interest for the specific season
                       outdir = file.path(base_dir, "data", "proc", "seasonal", "omip", variable),
                       months = c("01", "02", "03"), # define season (in numbered format)
                       months_name = "jan-mar" # define season name 
)

# April-June
htr_seasonal_frequency(indir = file.path(base_dir, "data", "proc", "sliced", "omip", variable),
                       tempdir = file.path(base_dir, "data", "temporary"), # you can also have this as a folder that isn't temporary, you just need to delete the line of code below that deletes all the files in this folder. `tempdir` holds the files that selects the particular months of interest for the specific season
                       outdir = file.path(base_dir, "data", "proc", "seasonal", "omip", variable),
                       months = c("04", "05", "06"), # define season (in numbered format)
                       months_name = "apr-jun" # define season name 
)

# July-September
htr_seasonal_frequency(indir = file.path(base_dir, "data", "proc", "sliced", "omip", variable),
                       tempdir = file.path(base_dir, "data", "temporary"), # you can also have this as a folder that isn't temporary, you just need to delete the line of code below that deletes all the files in this folder. `tempdir` holds the files that selects the particular months of interest for the specific season
                       outdir = file.path(base_dir, "data", "proc", "seasonal", "omip", variable),
                       months = c("07", "08", "09"), # define season (in numbered format)
                       months_name = "jul-sep" # define season name 
)

# October-December
htr_seasonal_frequency(indir = file.path(base_dir, "data", "proc", "sliced", "omip", variable),
                       tempdir = file.path(base_dir, "data", "temporary"), # you can also have this as a folder that isn't temporary, you just need to delete the line of code below that deletes all the files in this folder. `tempdir` holds the files that selects the particular months of interest for the specific season
                       outdir = file.path(base_dir, "data", "proc", "seasonal", "omip", variable),
                       months = c("10", "11", "12"), # define season (in numbered format)
                       months_name = "oct-dec" # define season name 
)

system(paste0("rm ", paste0(file.path(base_dir, "data", "temporary"), "/*")))
```

This code will result in 4 files for each model-scenario-variable-frequency, combination.

## Regridding

The climate models have different grids, so now we need to regrid and standardize the grid. This requires a base, empty raster that will be made automatically in the `regrid_esm()`.

```{r regrid}
htr_regrid_esm(indir = file.path(base_dir, "data", "proc", "seasonal", "omip", variable),
               outdir = file.path(base_dir, "data", "proc", "regridded", "yearly", "omip", variable),
               cell_res = 1,
               layer = "annual")
```

```{r plot_regridded, output = TRUE}
models <- list.files(file.path(base_dir, "data", "proc", "regridded", "yearly", "omip", variable), full.names = TRUE)
model1 <- rast(models[1])
var_name <- paste(variable, "1", sep = "_")
plot(model1[[var_name]])
model2 <- rast(models[2])
plot(model2[[var_name]])
```

Looks good!

## [FOR DEPTH-RESOLVED MODELS] Define depth domains

This is only applicable for depth-resolved models and this step should be skipped if only looking at surface models. We first define the depth domains using the levels. Each model has different levels.

```{r show_levels}
# Here I'm using the directory before changing the frequency to seasonal since changing frequency should not change the models.
htr_show_levels(indir = file.path(volumes_dir, "proc", "sliced", "omip", variable))
```

After which, we integrate values (weighted vertical means) across the selected levels for each depth domain.

```{r integrate}
# Surface
htr_integrate_levels(indir = file.path(base_dir, "data", "proc", "regridded", "yearly", "omip", variable),
                     tempdir = file.path(base_dir, "data", "temporary"),
                     outdir = file.path(base_dir, "data", "proc", "integrated", "omip", variable),
                     min_level = 0,
                     max_level = 35,
                     domain_name = "" # Although we know it's the surface layer, for this particular analyses, we don't want to add any suffix.
                     )
```

## Create ensemble

Input the `model_list` for the members of the ensemble per variable.

The ensemble members for each variable are as follows:

-   **tos**: ACCESS-OM2, ACCESS-OM2-025, CESM2, CMCC-CM2-HR4, CMCC-CM2-SR5, CNRM-CM6-1, CNRM-CM6-1-HR, EC-Earth3, FGOALS-f3-L, MIROC6, MRI-ESM2-0, NorESM2-LM, and TaiESM1-TIMCOM2 (n = 13)
-   **o2os**: ACCESS-OM2, CESM2, EC-Earth3, MRI-ESM2-0, and NorESM2-LM (n = 5)
-   **phos**: CESM2, MRI-ESM2-0, NorESM2-LM (n = 3)
-   **chlos**: ACCESS-OM2, CESM2, EC-Earth3, MRI-ESM2-0, NorESM2-LM (n = 5)
-   **sos**: ACCESS-OM2, ACCESS-OM2-025, CESM2, CMCC_CM2-HR4, CMCC-CM2-SR5, CNRM-CM6-1, CNRM-CM6-1-HR, EC-Earth3, FGOALS-f3-L, GFDL-CM4, MIROC6, MRI-ESM2-0, NorESM2-LM, TaiESM1-TIMCOM2 (n = 14)
-   **mlotst**: ACCESS-OM2, ACCESS-OM2-025, CESM2, CMCC-CM2-HR4, CMCC-CM2-SR5, CNRM-CM6-1, CNRM-CM6-1-HR, EC-Earth3, FGOALS-f3-L, GFDL-CM4, MIROC6, MRI-ESM2-0, NorESM2-LM, TaiESM1-TIMCOM2 (n = 14)
-   **no3os**: ACCESS-OM2, CESM2, EC-Earth3, MRI-ESM2-0, NorESM2-LM (n = 5)
-   **po4os**: ACCESS-OM2, CESM2, EC-Earth3, MRI-ESM2-0, NorESM2-LM (n = 5)
-   **nh4os**: 
-   **uo**: ACCESS-OM2, ACCESS-OM2-O25, CNRM-CM6-1, EC-Earth3, FGOALS-f3-L, GFDL-CM4, MIROC6, MRI-ESM2-0, TaiESM1-TIMCOM2 (n = 9)
-   **vo**

```{r ensemble}
ensemble <- c("ACCESS-OM2", "ACCESS-OM2-O25", "CNRM-CM6-1", "EC-Earth3", "FGOALS-f3-L", "GFDL-CM4", "MIROC6", "MRI-ESM2-0", "TaiESM1-TIMCOM2")

# January-March
htr_create_ensemble(indir = file.path(base_dir, "data", "proc", "integrated", "omip", variable), #input directory
                    outdir = file.path(base_dir, "data", "proc", "ensemble", "mean", "omip", variable), #output directory
                    model_list = ensemble, #list of models for ensemble
                    variable = variable, #variable name
                    freq = "Omon", #original frequency of data
                    scenario = "omip2", #emission scenario
                    season = "jan-mar",
                    mean = TRUE # if false, takes the median
                )

# April-June
htr_create_ensemble(indir = file.path(base_dir, "data", "proc", "integrated", "omip", variable), #input directory
                    outdir = file.path(base_dir, "data", "proc", "ensemble", "mean", "omip", variable), #output directory
                    model_list = ensemble, #list of models for ensemble
                    variable = variable, #variable name
                    freq = "Omon", #original frequency of data
                    scenario = "omip2", #emission scenario
                    season = "apr-jun",
                    mean = TRUE # if false, takes the median
                )

# July-September
htr_create_ensemble(indir = file.path(base_dir, "data", "proc", "integrated", "omip", variable), #input directory
                    outdir = file.path(base_dir, "data", "proc", "ensemble", "mean", "omip", variable), #output directory
                    model_list = ensemble, #list of models for ensemble
                    variable = variable, #variable name
                    freq = "Omon", #original frequency of data
                    scenario = "omip2", #emission scenario
                    season = "jul-sep",
                    mean = TRUE # if false, takes the median
                )

# October-December
htr_create_ensemble(indir = file.path(base_dir, "data", "proc", "integrated", "omip", variable), #input directory
                    outdir = file.path(base_dir, "data", "proc", "ensemble", "mean", "omip", variable), #output directory
                    model_list = ensemble, #list of models for ensemble
                    variable = variable, #variable name
                    freq = "Omon", #original frequency of data
                    scenario = "omip2", #emission scenario
                    season = "oct-dec",
                    mean = TRUE # if false, takes the median
                )
```

Then, we plot to see how it looks.

```{r plot_ensemble, output = TRUE}
ensemble_model <- list.files(file.path(base_dir, "data", "proc", "ensemble", "mean", "omip", variable), full.names = TRUE)
ensemble_jm <- rast(ensemble_model[1])
ensemble_aj <- rast(ensemble_model[2])
ensemble_js <- rast(ensemble_model[3])
ensemble_od <- rast(ensemble_model[4])
par(mfrow=c(2,2))
var_name <- paste(variable, "1", sep = "_")
plot(ensemble_jm[[var_name]])
title("January-March")
plot(ensemble_aj[[var_name]])
title("April-June")
plot(ensemble_js[[var_name]])
title("July-September")
plot(ensemble_od[[var_name]])
title("October-December")
```
